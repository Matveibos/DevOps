. С помощью .gitignore, сделать так, чтобы все файлы *.txt не попадали в репозиторий.
2. Изучить что такое git cherry-pick.
3. Продемонстрировать применение git cherry-pick на собственном репозитории (придумать любой пример).
4. Какая разница между git rebase и git merge ?
5. Какая разница между git pull и git fetch ?
6. Что такое git submodule ?
7. Изучить гит стратегии https://bool.dev/blog/detail/git-branching-strategies
______________________________________________________________________________________________________________________________________________
1) Необходимо добавить файл .gitignoe командой touch .gitignore и записать в него *.txt для игнорирования файлов с расширением .txt

2) git cherry-pick необходима для того, чтобы применить коммит из другой ветки.

3)Пример: Eсть две ветки main(дев) и stable(прод), в main разработчики добавляли файлы с фичами и в один прекрасный момент в проде был найден баг. 
Дабы этот баг пофиксить разработчик добавил файл с фиксом в ветку main. 
Теперь этот фикс нужно добавить в stable потому как если всю ветку main залить в прод то в прод попадут фичи(возможно с багами).
Таким образом нужно сделать git cherry-pick <commit hash>, для этого нужно:

3.1) перейти на ветку main командой git checkout main
3.2) выполнить команду git log для того чтобы найти <commit hash> и скопировать его
3.3) перейти на ветку stable командой git checkout stable
3.4) выполнить команду git cherry-pick <скопированный commit hash>.
3.5) Та-даааа-мм!! Баг на проде пофиксили задачу решили!

4) при git merge история изменений остается неизменной, с одной стороны это хорошо, но с другой может быть много "мусора"
при git rebase история коммитов может быть изменена так как может быть потеряна суть данных коммитов. Также использовать git rebase
необходимо весьма осторожно так как если сделать его неправильно, можно получить большое количество проблем. При git merge
изменяется только целевая ветка, а при git rebase меняются обе.

5)git pull это и есть git fetch + git merge, таким образом git fetch получает изменения но не вливает из в локальный репозиторий
а git pull получает и вливает данные изменения.

6) git submodule  позволяет использовать репозиторий git как подкаталог другого репозитория git. Таким образом подмодуль git это ссылка на другой репозиторий git.

7)Ознакомился с двумя гит стратегиями. 
7.1) Git Flow включает в себя несколько веток для разработки, релизов и смежных веток, преднанзначенных для взаимодействия между другими ветками. Собственно стандартная стратегия в болшинстве команд разной квалификации, Реализация CI/CD возможна, однако могут быть трудности связанные с объемами пул реквестов.
7.2)Trunk Based Development предназначена для опытных разработчиков, в ней хорошо реализуем CI/CD, однако необходимо высокое покрытие тестами.
